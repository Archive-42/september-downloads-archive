var __spreadArrays = (this && this.__spreadArrays) || function() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
export function on() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var reducer = args.pop();
    var types = args.reduce(function(result, creator) {
        return __spreadArrays(result, [creator.type]);
    }, []);
    return {
        reducer: reducer,
        types: types
    };
}
export function reducer(initialState) {
    var ons = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        ons[_i - 1] = arguments[_i];
    }
    var map = new Map();
    for (var _a = 0, ons_1 = ons; _a < ons_1.length; _a++) {
        var on_1 = ons_1[_a];
        for (var _b = 0, _c = on_1.types; _b < _c.length; _b++) {
            var type = _c[_b];
            if (!map.has(type)) {
                map.set(type, on_1.reducer);
            } else {
                console.warn(type + " already specified in an 'on' call.");
            }
        }
    }
    return function(state, action) {
        if (state === void 0) {
            state = initialState;
        }
        var reducer = map.get(action.type);
        return reducer ? reducer(state, action) : state;
    };
}